---
---

<section id="home" class="hero">
  <div class="hero-background">
    <canvas id="gridCanvas" class="grid-canvas"></canvas>
    <div class="gradient-orb orb-1"></div>
    <div class="gradient-orb orb-2"></div>
    <div class="gradient-orb orb-3"></div>
  </div>
  <div class="container">
    <div class="hero-content">
      <h1 class="hero-title">
        <span class="title-line">Your Complete Digital Agency</span>
        <span class="title-line">Bleeding-Edge AI.</span>
        <span class="title-line"><span class="gradient-text">Everything Included</span>.</span>
        <span class="title-line">One Flat Fee.</span>
      </h1>
      <p class="hero-description">
        When we say <strong>everything</strong>, we mean it. Custom websites. Advanced SEO. Social media management.
        PPC advertising. Email campaigns. Content creation. Analytics. Automation. Every single digital marketing
        service your business needs, powered by the most advanced AI technology available. <strong>All for one consistent monthly fee.</strong>
      </p>
      <div class="hero-buttons">
        <a href="#contact" class="btn btn-primary">Schedule Free Consultation</a>
        <a href="#services" class="btn btn-secondary">Explore Services</a>
      </div>
      <div class="hero-stats">
        <div class="stat-item">
          <span class="stat-number">847%</span>
          <span class="stat-label">AI Adoption Growth</span>
        </div>
        <div class="stat-item">
          <span class="stat-number">158%</span>
          <span class="stat-label">ROAS Improvement</span>
        </div>
        <div class="stat-item">
          <span class="stat-number">72%</span>
          <span class="stat-label">Cost Reduction</span>
        </div>
      </div>
    </div>
  </div>
  <div class="scroll-indicator">
    <span class="scroll-text">Scroll to explore</span>
    <div class="scroll-arrow"></div>
  </div>
</section>

<script>
  // Animated Grid Background
  const canvas = document.getElementById('gridCanvas') as HTMLCanvasElement;
  const ctx = canvas.getContext('2d');

  if (canvas && ctx) {
    // Set canvas size
    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    // Grid settings
    const gridSize = 50;
    const dotSize = 2;
    const connectionDistance = 150;
    const particles: Array<{x: number, y: number, vx: number, vy: number}> = [];

    // Create particles
    const particleCount = Math.floor((canvas.width * canvas.height) / 15000);
    for (let i = 0; i < particleCount; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        vx: (Math.random() - 0.5) * 0.5,
        vy: (Math.random() - 0.5) * 0.5
      });
    }

    // Mouse position
    let mouseX = canvas.width / 2;
    let mouseY = canvas.height / 2;

    canvas.addEventListener('mousemove', (e) => {
      const rect = canvas.getBoundingClientRect();
      mouseX = e.clientX - rect.left;
      mouseY = e.clientY - rect.top;
    });

    function drawGrid() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Draw grid dots
      ctx.fillStyle = 'rgba(99, 102, 241, 0.15)';
      for (let x = 0; x < canvas.width; x += gridSize) {
        for (let y = 0; y < canvas.height; y += gridSize) {
          const distToMouse = Math.hypot(mouseX - x, mouseY - y);
          const opacity = Math.max(0.05, Math.min(0.3, 1 - distToMouse / 300));
          ctx.globalAlpha = opacity;
          ctx.beginPath();
          ctx.arc(x, y, dotSize, 0, Math.PI * 2);
          ctx.fill();
        }
      }
      ctx.globalAlpha = 1;

      // Update and draw particles
      particles.forEach((particle, i) => {
        // Update position
        particle.x += particle.vx;
        particle.y += particle.vy;

        // Bounce off edges
        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;
        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;

        // Draw particle
        const distToMouse = Math.hypot(mouseX - particle.x, mouseY - particle.y);
        const size = Math.max(2, Math.min(5, 5 - distToMouse / 200));

        ctx.fillStyle = 'rgba(99, 102, 241, 0.8)';
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, size, 0, Math.PI * 2);
        ctx.fill();

        // Draw connections
        particles.slice(i + 1).forEach(otherParticle => {
          const dist = Math.hypot(particle.x - otherParticle.x, particle.y - otherParticle.y);
          if (dist < connectionDistance) {
            const opacity = (1 - dist / connectionDistance) * 0.3;
            ctx.strokeStyle = `rgba(99, 102, 241, ${opacity})`;
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(particle.x, particle.y);
            ctx.lineTo(otherParticle.x, otherParticle.y);
            ctx.stroke();
          }
        });
      });

      requestAnimationFrame(drawGrid);
    }

    drawGrid();
  }

  // Animated Counters for Hero Stats
  const statsObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const stats = entry.target.querySelectorAll('.stat-number');
        stats.forEach(stat => {
          const text = stat.textContent || '';
          let target: number;

          if (text.includes('+')) {
            target = parseInt(text.replace('+', ''));
            let current = 0;
            const increment = target / 50;
            const timer = setInterval(() => {
              current += increment;
              if (current >= target) {
                stat.textContent = target + '+';
                clearInterval(timer);
              } else {
                stat.textContent = Math.floor(current) + '+';
              }
            }, 30);
          } else if (text.includes('%')) {
            target = parseInt(text.replace('%', ''));
            let current = 0;
            const timer = setInterval(() => {
              if (current >= target) {
                stat.textContent = target + '%';
                clearInterval(timer);
              } else {
                current += 1;
                stat.textContent = current + '%';
              }
            }, 20);
          } else if (text.includes('x')) {
            const targetVal = parseFloat(text.replace('x', ''));
            let current = 0;
            const timer = setInterval(() => {
              current += 0.1;
              if (current >= targetVal) {
                stat.textContent = targetVal + 'x';
                clearInterval(timer);
              } else {
                stat.textContent = current.toFixed(1) + 'x';
              }
            }, 50);
          }
        });
        statsObserver.unobserve(entry.target);
      }
    });
  }, { threshold: 0.5 });

  const heroStats = document.querySelector('.hero-stats');
  if (heroStats) {
    statsObserver.observe(heroStats);
  }
</script>

<style>
  .hero {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    overflow: hidden;
    padding-top: 80px;
  }

  .hero-background {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 0;
    background: radial-gradient(ellipse at center, rgba(15, 23, 42, 0.8) 0%, var(--bg-darker) 100%);
  }

  .grid-canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
  }

  .gradient-orb {
    position: absolute;
    border-radius: 50%;
    filter: blur(100px);
    opacity: 0.2;
    animation: float 20s infinite ease-in-out;
    z-index: 2;
    pointer-events: none;
  }

  .orb-1 {
    width: 600px;
    height: 600px;
    background: radial-gradient(circle, #6366f1 0%, transparent 70%);
    top: -15%;
    left: -15%;
    animation-delay: 0s;
  }

  .orb-2 {
    width: 700px;
    height: 700px;
    background: radial-gradient(circle, #ec4899 0%, transparent 70%);
    top: 20%;
    right: -20%;
    animation-delay: 7s;
  }

  .orb-3 {
    width: 550px;
    height: 550px;
    background: radial-gradient(circle, #14b8a6 0%, transparent 70%);
    bottom: -15%;
    left: 25%;
    animation-delay: 14s;
  }

  .hero-content {
    position: relative;
    z-index: 10;
    text-align: center;
    max-width: 900px;
    margin: 0 auto;
    animation: fadeInUp 1s ease-out;
  }

  .hero-title {
    font-size: 4rem;
    font-weight: 900;
    line-height: 1.1;
    margin-bottom: 1.5rem;
    letter-spacing: -0.02em;
  }

  .title-line {
    display: block;
    animation: fadeInUp 1s ease-out backwards;
  }

  .title-line:nth-child(1) {
    animation-delay: 0.1s;
  }

  .title-line:nth-child(2) {
    animation-delay: 0.2s;
  }

  .title-line:nth-child(3) {
    animation-delay: 0.3s;
  }

  .gradient-text {
    position: relative;
    display: inline-block;
  }

  .gradient-text::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--gradient-1);
    border-radius: 2px;
  }

  .hero-description {
    font-size: 1.25rem;
    color: var(--text-secondary);
    margin-bottom: 2.5rem;
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
    animation: fadeInUp 1s ease-out 0.4s backwards;
  }

  .hero-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-bottom: 4rem;
    animation: fadeInUp 1s ease-out 0.5s backwards;
  }

  .hero-stats {
    display: flex;
    justify-content: center;
    gap: 4rem;
    animation: fadeInUp 1s ease-out 0.6s backwards;
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .stat-number {
    font-size: 2.5rem;
    font-weight: 800;
    background: var(--gradient-1);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .stat-label {
    font-size: 0.9rem;
    color: var(--text-muted);
    margin-top: 0.5rem;
  }

  .scroll-indicator {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    text-align: center;
    animation: fadeInUp 1s ease-out 0.7s backwards;
  }

  .scroll-text {
    font-size: 0.85rem;
    color: var(--text-muted);
    display: block;
    margin-bottom: 0.5rem;
  }

  .scroll-arrow {
    width: 2px;
    height: 30px;
    background: var(--text-muted);
    margin: 0 auto;
    position: relative;
    animation: scrollArrow 2s infinite ease-in-out;
  }

  .scroll-arrow::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 8px;
    height: 8px;
    border-right: 2px solid var(--text-muted);
    border-bottom: 2px solid var(--text-muted);
    transform: translateX(-50%) rotate(45deg);
  }

  @media (max-width: 1024px) {
    .hero-title {
      font-size: 3rem;
    }
  }

  @media (max-width: 768px) {
    .hero-title {
      font-size: 2.5rem;
    }

    .hero-description {
      font-size: 1.1rem;
    }

    .hero-stats {
      flex-direction: column;
      gap: 2rem;
    }

    .hero-buttons {
      flex-direction: column;
    }
  }

  @media (max-width: 480px) {
    .hero-title {
      font-size: 2rem;
    }

    .stat-number {
      font-size: 2rem;
    }
  }
</style>
